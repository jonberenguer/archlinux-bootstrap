#!/bin/bash


# has password: password123!
# run openssl passwd -6 password123!
# PWHASH="`openssl passwd -6`"

echo "Enter primary disk [/dev/sda]:"
read PRIDISK
[ -z "$PRIDISK" ] && PRIDISK=/dev/sda

echo "Enter hostname [workstation]:"
read NEWHOSTNAME
[ -z "$NEWHOSTNAME" ] && NEWHOSTNAME="workstation"

echo "Enter username [user]:"
read NEWUSER
[ -z "$NEWUSER" ] && NEWUSER="user"

echo "Enter new password"
#PWHASH="`openssl passwd -6`"
read PW


echo "Enter region [Taiwan]:"
read REGION
[ -z "$REGION" ] && REGION="Taiwan"

echo "Enter mirror url [local server]:"
read MIRRORSERVER
[ -z "$MIRRORSERVER" ] && MIRRORSERVER="http://archlinux.cs.nctu.edu.tw/\$repo/os/\$arch"


echo "Is virtual:"
read ISVIRTUAL
[ -z "$ISVIRTUAL" ] && ISVIRTUAL=1



## DO NOT CHANGE THESE VARIABLES
BOOT_TYPE="" #legacy or uefi
CPUMODEL=`grep -m 1 "^model name" /proc/cpuinfo`
GETPKG="pacman -Sy --noconfirm"


####################
#### mirror setup
####################

specific_mirror () {

cat << EOF > /etc/pacman.d/mirrorlist
Server = ${MIRRORSERVER}
EOF
}

region_mirror () {
  cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.orig

  grep -A 1 -i ${REGION} /etc/pacman.d/mirrorlist.orig | sed 's/--//' > /etc/pacman.d/mirrorlist
}


cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.orig

specific_mirror


####################
#### partition setup
####################

efivar -l >/dev/null 2>&1

if [[ $? -eq 0 ]]; then
	BOOT_TYPE="uefi"
else
	BOOT_TYPE="legacy"
fi


part_legacy () {
	printf "n\np\n1\n\n+200M\na\nt\n6\nw\n" | fdisk ${PRIDISK}
	printf "n\np\n2\n\n+2G\nt\n2\n82\nw\n" | fdisk ${PRIDISK}
	printf "n\np\n3\n\n+20G\nt\n3\n8e\nw\n" | fdisk ${PRIDISK}
	printf "n\np\n4\n\n\n\nt\n4\n8e\nw\n" | fdisk ${PRIDISK}
}

part_uefi () {
	sgdisk -n 1:2048:+512M -t 1:EF00  -g ${PRIDISK}
	sgdisk -n 2::+2G -t 2:8200  -g ${PRIDISK}
	sgdisk -n 3::+20G -t 3:8e00  -g ${PRIDISK}
	sgdisk -n 4:: -t 4:8e00  -g ${PRIDISK}
}


cpart_legacy () {
	printf "n\np\n1\n\n+200M\na\nt\n6\nw\n" | fdisk ${PRIDISK}
	printf "n\np\n2\n\n+2G\nt\n2\n82\nw\n" | fdisk ${PRIDISK}
	printf "n\np\n3\n\n\nt\n3\n8e\nw\n" | fdisk ${PRIDISK}
}

cpart_uefi () {
	sgdisk -n 1:2048:+512M -t 1:EF00  -g ${PRIDISK}
	sgdisk -n 2::+2G -t 2:8200  -g ${PRIDISK}
	sgdisk -n 3:: -t 3:8e00  -g ${PRIDISK}
}



case "${BOOT_TYPE}" in
	"legacy")
		part_legacy
		;;
	"uefi")
		part_uefi
		;;
	*) ;;
esac

sleep 10
partprobe ${PRIDISK}

sleep 10

# setup boot and swap partiitons
mkfs.fat ${PRIDISK}1

mkswap ${PRIDISK}2
swapon ${PRIDISK}2

# add section for cryptsetup



pvcreate ${PRIMDISK}3
vgcreate vg_root ${PRIDISK}3
lvcreate -l 100%free vg_root -n root
mkfs.ext4 -F /dev/mapper/vg_root-root


pvcreate ${PRIMDISK}4
vgcreate vg_home ${PRIDISK}4
lvcreate -l 100%free vg_home -n home
mkfs.ext4 -F /dev/mapper/vg_home-home


mount /dev/mapper/vg_root-root /mnt
mkdir /mnt/{boot,home}

mount /dev/mapper/vg_home-home /mnt/home
mount ${PRIDISK}1 /mnt/boot


####################
#### pacstrap base
####################

pacstrap /mnt/ base

case "${BOOT_TYPE}" in
	"legacy")
		genfstab -p /mnt >> /mnt/etc/fstab
		;;
	"uefi")
		genfstab -U /mnt >> /mnt/etc/fstab
		;;
	*) ;;
esac


####################
#### minimal setup
####################

cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist

arch-chroot /mnt /bin/bash <<EOF

cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.orig

ln -sf /usr/share/zoneinfo/UTC /etc/localtime
hwclock --systohc

echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf

echo ${NEWHOSTNAME} | tee /etc/hostname

echo "127.0.1.1       ${NEWHOSTNAME}.localdomain ${NEWHOSTNAME}" > /etc/hosts

pacman -Syu
$GETPKG  mkinitcpio

if echo "${CPUMODEL}" | grep -iqF intel; then
  $GETPKG  intel-ucode
fi

if echo "${CPUMODEL}" | grep -iqF amd; then
  $GETPKG  amd-ucode
fi

$GETPKG  linux-lts linux-lts-headers
$GETPKG  lvm2
$GETPKG  vim dhcpcd wpa_supplicant

ln -s /usr/bin/vim /usr/bin/vi


systemctl enable dhcpcd

echo -e "${PW}\n${PW}" | passwd root
EOF

#sed -i -r "s|(^root:)|\1${PWHASH}|" /mnt/etc/shadow


####################
#### generating initramfs
####################

arch-chroot /mnt /bin/bash <<EOF
cp /etc/mkinitcpio.conf /etc/mkinitcpio.conf.orig

if grep -e '^HOOKS.*lvm2.*' /etc/mkinitcpio.conf ; then
  echo lvm module already included
else
  sed -i -r 's/^(HOOKS.*)filesystems(.*)/\1lvm2 filesystems\2/' /etc/mkinitcpio.conf
fi

mkinitcpio -p linux-lts

EOF



####################
#### boot setup
####################


boot_legacy () {
arch-chroot /mnt /bin/bash <<EOF
$GETPKG grub
grub-install --target=i386-pc --recheck /dev/sda

sed -i -r 's/^(GRUB_CMDLINE_LINUX_DEFAULT=).*/\1"ipv6.disable=1"/' /etc/default/grub

grub-mkconfig -o /boot/grub/grub.cfg
EOF
}

boot_uefi () {
arch-chroot /mnt /bin/bash <<EOF
$GETPKG grub efibootmgr
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB

sed -i -r 's/^(GRUB_CMDLINE_LINUX_DEFAULT=).*/\1"ipv6.disable=1"/' /etc/default/grub

grub-mkconfig -o /boot/grub/grub.cfg
EOF
}



case "${BOOT_TYPE}" in
	"legacy")
		boot_legacy
		;;
	"uefi")
		boot_uefi
		;;
	*) ;;
esac


####################
#### setup user and additional service
####################

create_user () {

USERNAME=$1

arch-chroot /mnt /bin/bash <<EOF
useradd -u 1000 -m $USERNAME
usermod -aG wheel $USERNAME
usermod -aG users $USERNAME
usermod -aG audio $USERNAME

pacman -S --noconfirm sudo

# uncomment wheel
sed -i 's/# \(\%wheel.*NOPASSWD.*\)/\1/' /etc/sudoers

# setup location for AUR packages
mkdir /opt/AUR
chown 1000:1000 /opt/AUR

echo -e "${PW}\n${PW}" | passwd $USERNAME

EOF

#sed -i -r "s|(^${USERNAME}:)|\1${PWHASH}|" /mnt/etc/shadow
}

enable_sshd () {
arch-chroot /mnt /bin/bash <<EOF

$GETPKG openssh
systemctl enable sshd

EOF
}

create_user $NEWUSER

enable_sshd



